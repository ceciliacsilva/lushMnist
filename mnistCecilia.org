#+TITLE: IA
#+AUTHOR: Cecília Carneiro e Silva, Valks
#+DATE: 06/2016

* Implementação

  Segue abaixo a implementação de uma rede neural em Lush <http://lush.sourceforge.net/>, mais especificadamente uma 'Convolutional Neural Networks' (ConvNets) . As diferenças entre elas se resume no fato das ConvNets assumirem claramente que desejam que sua estrada seja uma imagem, com isso, algumas propriedades são 'escondidas'.

  O código abaixo executa o clássico problema MNIST, classificação de números manuscritos. Entraremos com imagens e seus respectivos labels, o treinamento será feito com 60000 <imagens, labels>, disponíveis em: <http://yann.lecun.com/exdb/mnist/> .
  
  Esse trabalho foi feito com ajuada da biblioteca gblearn2, biblioteca padrão do Lush para 'Machine Learn'.

#+BEGIN_SRC shell :tangle "README.md"
Mnist - Lush
------------

Esse projeto é o trabalho da disciplina de Inteligência Artificial (IA), o objetivo é classificar dígitos manuscritos [0-9]. Mnist é um conjunto de imagens manuscritas e seus respectivos labels. Os conjuntos base de treinamente e testes, devem ser baixados no site "THE MNIST DATABASE of handwritten digits", http://yann.lecun.com/exdb/mnist/. Faça o download dos 4 arquivos, os dois primeiros serão usados para treinar a rede e os dois últimos serão usados em testes. Siga as instruções do site para descompactá-los.
  
Todos as entradas serão imagens 28x28 pixels.

Requisitos
---------

  - [1] Lush, disponível em: http://lush.sourceforge.net/. Lush is an object-oriented programming language designed for researchers, experimenters, and engineers interested in large-scale numerical and graphic applications.
  
  - [2] Racket Language, disponível em: http://racket-lang.org/. Racket is a full-spectrum programming language. It goes beyond Lisp and Scheme with dialects that support objects, types, laziness, and more. 
  
Transformação de imagens
------------------------

Programa em Racket Language. Programa auxiliar para transformar uma imagem .png de um único canal, em um padrão que será quebrado no programa principal. Alterar os diretórios base, as variáveis *png-path* e *mnist-path* no programa transformaImagens.rkt.
  
  $ racket 
  Welcome to Racket v6.2.1.
  > (load "transformaImagens.rkt")
  > (enter! "transformaImagens.rkt")
  
Crie uma imagem .png, por exemplo, no GIMP (GNU Image Manipulation Program), desenhando um número de 0 a 9. Nomeie o arquivo com <digito-desenhado>.png. Lembrando sempre que esse arquivo deve ter 28x28 pixels. Considere o arquivo 0.png, disponível na pasta imagens.
  
  > ;(png->mnist "<digito>.png" "<extenção-mnist>")
  > (png->mnist "0.png" "ccs")
  
O arquivo "0.ccs" foi criado na mnist, ele tem um padrão proprio para ser quebrado no programa principal.
  
Programa principal
------------------
  
Programa em Lush. Implementação da rede neural, ou melhor 'Convolutional Neural Networks' (ConvNets), rede adaptada para processar imagens, usa o método Backpropagation (http://www.icmc.usp.br/~andre/research/neural/MLP.htm), para realizar o treinamento supervisionado, com "gradient-based training". O software usa a biblioteca "gblearn", disponível por padrão nas atuais versões do Lush.
    
Alterar os caminhos, *mnist-path* e *arq-path*, arquivo "mnistCecilia.lsh".
    
Treinando a rede com 60000.

  ? (load "mnistCecilia.lsh")
  ? ;(defvar <nome-rede> (mnist-main <qtdd-imagens-treinar>))
  ? (defvar rede (mnist-main 60000))
  Rede treinada com 60000 imagens.
  
  = rede
    
  realtime = = 1097.647s aproximadamente 19 min
  
Testando a rede treinada. Foram implementados 3 tipos de testes.

* Porcentagem de acertos

Dada uma quantidade de imagens de entrada, em quantas a rede acertou o digito desenhado.

   ? ;(<nome-rede> <qtdd-imagens-teste>)
   ? (rede 100)
     Testando a rede para 100 imagens.
     [60000]  size=100  energy=0.0514  correct=100.00%  errors=0.00%  rejects=0.00%
     = ()
   ? (rede 1000)
     Testando a rede para 1000 imagens.
     [60000]  size=1000  energy=0.0784  correct=99.00%  errors=1.00%  rejects=0.00%
     = ()
 
* Imagem do banco de teste

Verificar a resposta da rede para uma imagem específica no banco de teste.
   
   ? ;(<nome-rede> <qtdd-imagens-teste> <imagem-desejada>)
   ? (rede 100 23)
     Testando o elemento 23 do arquivo t10k-images.
    "Imagem:"
    <visualização do número>
    Esperado = 5   |   Obtido = 5 
    = ()

* Imagem criada localmente

Testar uma imagem criada localmente, traduzida usando o programa "transformaImagem.rkt".
    
   ? ;(<nome-rede> <qtdd-imagens-teste> <digito>.<extensão>)
   ? (rede 100 "0.ccs")
     (("7.ccs" 19) ("9.vlq" 18) ("5.ccs" 17) ("0.vlq" 16) ("6.vlq" 15) ("3.vlq" 14) ("8.ccs" 13) ("5.vlq" 12) ("9.ccs" 11) ("3.ccs" 10) ("1.vlq" 9) ("7.vlq" 8) ("2.ccs" 7) ("6.ccs" 6) ("0.ccs" 5) ("8.vlq" 4) ("4.vlq" 3) ("4.ccs" 2) ("1.ccs" 1))
     Testando o elemento 0.ccs do arquivo t10k-images.
    "Imagem:"
    <visualização número>
    Esperado = 0   |   Obtido = 0 
    = ()
#+END_SRC

#+BEGIN_SRC lisp :tangle "mnistCecilia.lsh"
  ;;MNIST - lush, gblearn
  ;;Cecília Carneiro e Silva
  ;;DATE: 06/2016
  
  (libload "gblearn2/gb-trainers")
  (libload "gblearn2/gb-meters")
  (libload "gblearn2/net-cscscf")
  (libload "gblearn2/demos/dsource-mnist")
  
  (defvar *mnist-path* "/home/cecilia/eblearn-code/demos/mnist/")
  (defvar *arq-path* "/home/cecilia/Dropbox/8periodo/ia/nn/mnist/")
  
  (de mnist-main (treino-size)
      (let ((treino-db
             (new dsource-idx3l-narrow
                  (new dsource-mnist 
                       (load-matrix (concat-fname *mnist-path* "train-images-idx3-ubyte"))
                       (load-matrix (concat-fname *mnist-path* "train-labels-idx1-ubyte"))
                       28 28 0 0.01) ;;w h bias offset
                  treino-size 0))) ;;cria n do dsource-mnist
        (let ((nOut 10)
              (objetivo 1))
          (let ((labels (int-matrix nOut))
                (objetivos (float-matrix nOut nOut)))
            (idx-f2dotc objetivos 1.5 objetivos) 
            (objetivos ()() (- objetivo))
            (for (i 0 (- nOut 1))
                 (objetivos i i objetivo)
                 (labels i i))
                                          ;(print labels)
                                          ;(print (objetivos 1 1))
                                          ;(print (objetivos 0 1))
            (let ((treino-parametro (new idx1-ddparam 0 treino-size)))
                                          ;(print treino-parametro)
              (let ((lenet-rede
                     (new-lenet5 28 28
                                 5 5
                                 2 2
                                 5 5
                                 2 2
                                 200  ;; dim of hidden layer
                                 10 treino-parametro)))
                                          ;(print lenet-rede)
                (let ((minha-rede
                       (new idx3-supervised-module
                            lenet-rede
                            (new edist-cost labels 1 1 objetivos)
                            (new max-classer labels))))
                  (let ((treino-rede
                         (new supervised-gradient minha-rede treino-parametro)))
                    (let ((treino-medida (new classifier-meter)))
                      (==> :minha-rede:machine forget 1 2) ;;inicializa os pesos da rede aleatorios
                      (==> treino-rede compute-diaghessian treino-db 200 0.02)
                      (==> treino-rede train treino-db treino-medida 1e-4 0)
                      (printf "Rede treinada com %d imagens.\n\n" treino-size)
                      (eval
                       `(lambda(detectar-size &optional (numero-imagem false))
                          (cond ((stringp numero-imagem)
                                 (let* ((arquivos (arq-quebrar))
                                        (matImagem (car arquivos))
                                        (matLabel (cadr arquivos))
                                        (itens (caddr arquivos)))
                                   (let ((elemento (assoc numero-imagem itens)))
                                     (cond (elemento
                                            (let ((detectar-db
                                                   (new dsource-idx3l-narrow
                                                        (new dsource-mnist
                                                             matImagem 
                                                             matLabel
                                                             28 28 0 0.01)
                                                        detectar-size 0)))
                                              (let ((detectar-medida (new classifier-meter)))
                                                (let ((detectar-rede ,treino-rede));;dps de treinada
                                                  (print itens)
                                                  (printf 
                                                   "Testando o elemento %s do arquivo t10k-images.\n" 
                                                   numero-imagem)
                                                  (let ((numero-lista (cadr elemento)))
                                                    (print numero-lista)
                                                    (let ((resultado
                                                           (nth 
                                                            (==> detectar-rede 
                                                                 test-sample
                                                                 detectar-db detectar-medida numero-lista) 2))
                                                          (esperado 
                                                           (mostrar-imagem numero-lista matImagem matLabel)))
                                                      (printf 
                                                       "Esperado = %d   |   Obtido = %d \n" esperado resultado)
                                                      ))
                                                  ))
                                              )))
                                     )))
                                  ((and (numberp numero-imagem) (< numero-imagem detectar-size))
                                   (let* ((matImagem
                                           (load-matrix (concat-fname *mnist-path* "t10k-images-idx3-ubyte")))
                                          (matLabel 
                                           (load-matrix (concat-fname *mnist-path* "t10k-labels-idx1-ubyte"))))
                                     (let ((detectar-db
                                            (new dsource-idx3l-narrow
                                                 (new dsource-mnist
                                                      matImagem 
                                                      matLabel
                                                      28 28 0 0.01)
                                                 detectar-size 0)))
                                       (let ((detectar-medida (new classifier-meter)))
                                         (let ((detectar-rede ,treino-rede));;dps de treinada
                                           (printf 
                                            "Testando o elemento %d do arquivo t10k-images.\n" numero-imagem)
                                           (let ((resultado
                                                  (nth 
                                                   (==> detectar-rede 
                                                        test-sample
                                                        detectar-db detectar-medida numero-imagem) 2))
                                                 (esperado (mostrar-imagem numero-imagem matImagem matLabel)))
                                             (printf "Esperado = %d   |   Obtido = %d \n" esperado resultado)
                                             ))
                                         )
                                       ))
                                   )
                                  (t (printf "Testando a rede para %d imagens.\n" detectar-size) 
                                     (let* ((matImagem
                                             (load-matrix (concat-fname *mnist-path* "t10k-images-idx3-ubyte")))
                                            (matLabel
                                             (load-matrix (concat-fname *mnist-path* "t10k-labels-idx1-ubyte"))))
                                       (let ((detectar-db
                                              (new dsource-idx3l-narrow
                                                   (new dsource-mnist
                                                      matImagem 
                                                      matLabel
                                                      28 28 0 0.01)
                                                   detectar-size 0)))
                                         (let ((detectar-medida (new classifier-meter)))
                                           (let ((detectar-rede ,treino-rede));;dps de treinada
                                             
                                             (==> detectar-rede test detectar-db detectar-medida)
                                             (==> detectar-medida display))
                                           )))
                                     ))
                          )
                       ))
                    )
                  ))
              ))
          ))
      )
              
  
  (de new-lenet5 (image-height
                  image-width
                  ki0 kj0 si0 sj0 ki1 kj1 si1 sj1
                  hid output-size net-param)
      (let ((table0 (full-table 1 20))
            (table1 (full-table 20 50))
            (table2 (full-table 50 hid)))
        (new net-cscscf
             image-height image-width
             ki0 kj0 table0 si0 sj0
             ki1 kj1 table1 si1 sj1
             ;; WARNING: those two numbers must be changed
             ;; when image-height/image-width change
             (/ (- (/ (- image-height (1- ki0)) si0) (1- ki1)) si1)
             (/ (- (/ (- image-width (1- kj0)) sj0) (1- kj1)) sj1)
             table2
             output-size
             net-param)))
  
  (de mostrar-imagem (numeroMat imagemMat labelMat)
      (print "Imagem:")
      (for (i 0 27)
           (for (j 0 27)
                (let ((intensidade (imagemMat numeroMat i j)))
                  (cond ((< intensidade 10)  (printf "%d    " intensidade))
                        ((< intensidade 100) (printf "%d   "  intensidade))
                        (t                   (printf "%d  "   intensidade))
                        )))
           (printf "\n"))
      (labelMat numeroMat)
      )
  
  (de arq-quebrar ()
      (let ((matImagem (load-matrix (concat-fname *mnist-path* "t10k-images-idx3-ubyte")))
            (matLabel  (load-matrix (concat-fname *mnist-path* "t10k-labels-idx1-ubyte"))))
        (let* ((arquivos (files *arq-path*))
               (arqValidos (glob "([0-9].vlq)|([0-9].ccs)|([0-9].usr)" arquivos)))
          (let ((quantidade (length arqValidos))
                (paraUsar '()))
            (for (k 1 quantidade)
                 (let* ((arqAtual (nth arqValidos k))
                        (fd (open-read (concat-fname *arq-path* arqAtual)))
                        (labelValor (val (car (regex-split "([0-9])" arqAtual))))
                        (labelExt (car (regex-split "([a-z])+" arqAtual))))
                   (let* ((linhas (read-lines fd))
                          (tam (length linhas)))
                     (for (i 0 27)
                          (let ((linha (nth linhas i)) )
                            (cond ((stringp linha)
                                   (let ((linhaTratada (regex-split "([0-9]+)" linha)))
                                          ;(print linhaTratada)
                                          ;(print (nth linhaTratada 1))
                                     (for (j 1 27)
                                          (matImagem k i j (val (nth linhaTratada j)))
                                          )
                                     )
                                   ))
                            )
                          )
                     (matLabel k labelValor)
                     (setq paraUsar (cons (list arqAtual k) paraUsar))
                     )
                   )
                 )
            (list matImagem matLabel paraUsar)
            )
          ))
      )
  
  (de print-mat (mat li lj lz)
      (for (z 0 lz)
           (for (i 0 li)
                (for (j 0 lj)
                     (printf "%d  " (mat z i j))
                     )
                (printf "\n")
                )
           )
      )
#+END_SRC

* LeNet-5, convolutional neural networks
  Convolutional Neural Networks are are a special kind of multi-layer neural networks. Like almost every other neural networks they are trained with a version of the back-propagation algorithm. Where they differ is in the architecture.   
  Convolutional Neural Networks are designed to recognize visual patterns directly from pixel images with minimal preprocessing.  
  They can recognize patterns with extreme variability (such as handwritten characters), and with robustness to distortions and simple geometric transformations.  
  LeNet-5 is our latest convolutional network designed for handwritten and machine-printed character recognition.  

* Backpropagation
  
  Tratamento supervisionado.

  Com o erro calculado, o algoritmo corrige os pesos em todas as camadas, partindo da saída até a entrada.

  Durante o treinamento com o algoritmo backpropagation, a rede opera em uma sequência de dois passos. Primeiro, um padrão é apresentado à camada de entrada da rede. A atividade resultante flui através da rede, camada por camada, até que a resposta seja produzida pela camada de saída. No segundo passo, a saída obtida é comparada à saída desejada para esse padrão particular. Se esta não estiver correta, o erro é calculado. O erro é propagado a partir da camada de saída até a camada de entrada, e os pesos das conexões das unidades das camadas internas vão sendo modificados conforme o erro é retropropagado.

  As redes que utilizam backpropagation trabalham com uma variação da regra delta, apropriada para redes multi-camadas: a regra delta generalizada. A regra delta padrão essencialmente implementa um gradiente descendente no quadrado da soma do erro para funções de ativação lineares. Redes sem camadas intermediárias, podem resolver problemas onde a superfície de erro tem a forma de um parabolóide com apenas um mínimo. Entretanto, a superfície do erro pode não ser tão simples, como a ilustrada na figura abaixo, e suas derivadas mais difíceis de serem calculadas. Nestes casos devem ser utilizadas redes com camadas intermediárias. Ainda assim, as redes ficam sujeitas aos problemas de procedimentos "hill-climbing", ou seja, ao problema de mínimos locais.

  Com isso o erro vai sendo progressivamente diminuído, como pode ser observado na figura abaixo.


* Gradiente descendente

  Método mais comum de minimização de erros, usado no backpropagation.

  Basic modules generally do not assume much about the kind of learning algorithm with which they will be trained. The most common form of training is gradient-based training. gradient-based training consists in finding the set of parameters that minimize a particular energy function (generally computed by averaging over a set of training examples).
